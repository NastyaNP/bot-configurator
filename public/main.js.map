{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/common/config/dialog.config.ts","./src/app/common/helpers/general.helper.ts","./src/app/common/helpers/update.helper.ts","./src/app/models/btn.model.ts","./src/app/models/dialog.model.ts","./src/app/modules/button/button.directive.ts","./src/app/modules/button/button.module.ts","./src/app/modules/button/components/button/button.component.ts","./src/app/modules/button/components/button/button.component.html","./src/app/modules/button/components/create-button-popup/create-button-popup.component.ts","./src/app/modules/button/components/create-button-popup/create-button-popup.component.html","./src/app/modules/comfirmation/components/remove-confirmation-popup/remove-confirmation-popup.component.ts","./src/app/modules/comfirmation/components/remove-confirmation-popup/remove-confirmation-popup.component.html","./src/app/modules/comfirmation/confirmation.module.ts","./src/app/modules/menu/components/create-menu-popup/create-menu-popup.component.ts","./src/app/modules/menu/components/create-menu-popup/create-menu-popup.component.html","./src/app/modules/menu/components/menu/menu.component.ts","./src/app/modules/menu/components/menu/menu.component.html","./src/app/modules/menu/menu.module.ts","./src/app/modules/snackbar/components/snackbar/snackbar.component.ts","./src/app/modules/snackbar/components/snackbar/snackbar.component.html","./src/app/modules/snackbar/snackbar.module.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit, ViewEncapsulation } from \"@angular/core\";\r\nimport { Update } from \"./models/types\";\r\nimport { Menu } from \"./models/menu.model\";\r\nimport { Button, ButtonTranslatedType, ButtonType } from \"./models/btn.model\";\r\nimport { MatDialog, MatDialogConfig } from \"@angular/material/dialog\";\r\nimport {\r\n    CreateButtonPopupComponent\r\n} from \"./modules/button/components/create-button-popup/create-button-popup.component\";\r\nimport { PopupMode } from \"./models/dialog.model\";\r\nimport { UpdateHelper } from \"./common/helpers/update.helper\";\r\nimport { CreateMenuPopupComponent } from \"./modules/menu/components/create-menu-popup/create-menu-popup.component\";\r\nimport {\r\n    EntityName, RemoveConfirmationPopupComponent,\r\n    RemovingItem\r\n} from \"./modules/comfirmation/components/remove-confirmation-popup/remove-confirmation-popup.component\";\r\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\r\nimport { SnackbarComponent } from \"./modules/snackbar/components/snackbar/snackbar.component\";\r\nimport cloneDeep from \"lodash.clonedeep\";\r\nimport { dialogConfig } from \"./common/config/dialog.config\";\r\n\r\nconst MENUS: string = \"MENUS_MAP\";\r\n\r\n@Component({\r\n    selector: \"app-root\",\r\n    templateUrl: \"./app.component.html\",\r\n    styleUrls: [\"./app.component.scss\"],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n    private menusMap: Map<Menu[\"id\"], Menu> = new Map<Menu[\"id\"], Menu>();\r\n    private readonly dialogConfig: MatDialogConfig = dialogConfig;\r\n\r\n    constructor(\r\n        private dialog: MatDialog,\r\n        private snackBar: MatSnackBar\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this.loadMenusFromStorage();\r\n        console.log(\"Menus was loaded from localStorage\");\r\n    }\r\n\r\n    public get menus(): Menu[] {\r\n        return [...this.menusMap.values()];\r\n    }\r\n\r\n    public copyJSONtoClipboard(): void {\r\n        const menus: Menu[] = cloneDeep(this.getMenus());\r\n        menus.flatMap((menu: Menu) => menu.btn_elements).forEach((button: Button) => {\r\n            button.type = this.translateButtonType(button.type);\r\n            button.type += `_${button.id}`;\r\n        });\r\n\r\n        try {\r\n            globalThis.navigator.clipboard.writeText(JSON.stringify(menus, undefined, 2));\r\n            this.openNotification(\"JSON скопирован в буффер обмена\");\r\n        } catch (error) {\r\n            this.openNotification(\"Что-то пошло не так\");\r\n            console.error(\"Error is\", { error });\r\n        }\r\n\r\n    }\r\n\r\n    public onOpenMenuCreationPopup(): void {\r\n        this.openMenuCreationPopup();\r\n    }\r\n\r\n    public onOpenMenuEditingPopup(menuId: string): void {\r\n        this.openMenuCreationPopup(menuId);\r\n    }\r\n\r\n    public onOpenButtonCreationPopup(menuId: string): void {\r\n        this.openButtonCreationPopup(menuId);\r\n    }\r\n\r\n    public onOpenButtonEditingPopup(menuId: string, buttonId: string): void {\r\n        this.openButtonCreationPopup(menuId, buttonId);\r\n    }\r\n\r\n    public clearStorage(): void {\r\n        window.localStorage.clear();\r\n    }\r\n\r\n    public onRemoveButton(menuId: string, buttonId: string): void {\r\n        const button: Button = this.getButton(menuId, buttonId);\r\n        if (button) {\r\n            this.openRemoveConfirmationPopup(button, \"button\", () => {\r\n                this.removeButton(menuId, buttonId);\r\n                this.openNotification(`Кнопка \"${ button.caption }\" удалена`);\r\n            });\r\n        }\r\n    }\r\n\r\n    public onRemoveMenu(menuId: string): void {\r\n        const menu: Menu = this.getMenu(menuId);\r\n        if (menu) {\r\n            this.openRemoveConfirmationPopup(menu, \"menu\", () => {\r\n                this.removeMenu(menuId);\r\n                this.openNotification(`Меню \"${ menu.caption }\" удалено`);\r\n            });\r\n        }\r\n    }\r\n\r\n    private openRemoveConfirmationPopup(removingItem: RemovingItem, entityName: EntityName, whenRemoveClicked: () => void): void {\r\n        const dialogRef = this.dialog.open(RemoveConfirmationPopupComponent, {\r\n            ...this.dialogConfig,\r\n            data: {\r\n                mode: PopupMode.REMOVE,\r\n                [entityName]: removingItem\r\n            }\r\n        });\r\n\r\n        dialogRef.afterClosed().subscribe((isRemoved: boolean) => {\r\n            if (isRemoved) {\r\n                whenRemoveClicked();\r\n            }\r\n        });\r\n    }\r\n\r\n    private openMenuCreationPopup(menuId?: string): void {\r\n        const editMode: boolean = Boolean(menuId);\r\n        const menu: Menu = this.getMenu(menuId);\r\n\r\n        const dialogRef = this.dialog.open(CreateMenuPopupComponent, {\r\n            ...this.dialogConfig,\r\n            data: {\r\n                mode: editMode ? PopupMode.EDIT : PopupMode.CREATION,\r\n                menu\r\n            }\r\n        });\r\n\r\n        dialogRef.afterClosed().subscribe((newMenu: Update<Menu>) => {\r\n            if (!newMenu) {\r\n                return;\r\n            }\r\n\r\n            if (editMode && menu) {\r\n                this.menusMap.set(newMenu.id, UpdateHelper.update<Menu>(menu, newMenu.parameters));\r\n                this.openNotification(`Меню \"${ menu.caption }\" изменено`);\r\n            } else {\r\n                this.menusMap.set(newMenu.id, <Menu>{\r\n                    id: newMenu.id,\r\n                    ...newMenu.parameters\r\n                });\r\n                this.openNotification(`Меню \"${ newMenu.parameters.caption }\" создано`);\r\n            }\r\n            this.save();\r\n        });\r\n    }\r\n\r\n    private openButtonCreationPopup(menuId: string, buttonId?: string): void {\r\n        const editMode: boolean = Boolean(buttonId);\r\n        const menu: Menu = this.getMenu(menuId);\r\n        const buttons: Button[] = menu.btn_elements;\r\n        const buttonIndex: number = buttons.findIndex((button: Button) => button.id === buttonId);\r\n        const button: Button = buttons[buttonIndex];\r\n\r\n        const dialogRef = this.dialog.open(CreateButtonPopupComponent, {\r\n            ...this.dialogConfig,\r\n            data: {\r\n                mode: editMode ? PopupMode.EDIT : PopupMode.CREATION,\r\n                button,\r\n                menus: this.getMenus(),\r\n                currentMenu: menu\r\n            }\r\n        });\r\n\r\n        dialogRef.afterClosed().subscribe((newButton: Update<Button>) => {\r\n            if (!newButton) {\r\n                return;\r\n            }\r\n\r\n            if (editMode) {\r\n                if (buttonIndex !== -1) {\r\n                    buttons[buttonIndex] = UpdateHelper.update<Button>(button, newButton?.parameters);\r\n                    this.openNotification(`Кнопка \"${ button.caption }\" изменена`);\r\n                }\r\n            } else {\r\n                buttons.push(<Button>{\r\n                    id: newButton.id,\r\n                    ...newButton.parameters\r\n                });\r\n                this.openNotification(`Кнопка \"${ newButton.parameters.caption }\" создана`);\r\n            }\r\n            this.save();\r\n        });\r\n    }\r\n\r\n    private getButton(menuId: string, buttonId: string): Button {\r\n        const menu: Menu = this.getMenu(menuId);\r\n        return menu\r\n            ? menu.btn_elements.find((button: Button) => button.id === buttonId)\r\n            : null;\r\n    }\r\n\r\n    private getMenu(menuId: string): Menu {\r\n        return this.menusMap.get(menuId);\r\n    }\r\n\r\n    private getMenus(): Menu[] {\r\n        return [...this.menusMap.values()];\r\n    }\r\n\r\n    private removeButton(menuId: string, buttonId: string): void {\r\n        const menu: Menu = this.getMenu(menuId);\r\n        const index: number = menu.btn_elements.findIndex((btn: Button) => btn.id === buttonId);\r\n        menu.btn_elements.splice(index, 1);\r\n        this.save();\r\n    }\r\n\r\n    private removeMenu(menuId: string): void {\r\n        this.menusMap.delete(menuId);\r\n        this.clearAllMenuReferences(menuId);\r\n        this.save();\r\n    }\r\n\r\n    private loadMenusFromStorage(): void {\r\n        const entriesString: string = window.localStorage.getItem(MENUS) ?? \"[]\";\r\n        const entries = JSON.parse(entriesString);\r\n        this.menusMap = new Map(entries);\r\n    }\r\n\r\n    private clearAllMenuReferences(menuId: string): void {\r\n        for (const menu of this.menusMap.values()) {\r\n            menu.btn_elements.forEach((button: Button) => {\r\n                if (button.src === menuId) {\r\n                    button.src = \"\";\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private save(): void {\r\n        const menusEntries = [...this.menusMap.entries()];\r\n        window.localStorage.setItem(MENUS, JSON.stringify(menusEntries));\r\n    }\r\n\r\n    private translateButtonType(value: string): string {\r\n        switch (value) {\r\n            case ButtonType.MENU:\r\n                return ButtonTranslatedType.MENU;\r\n            case ButtonType.TEXT:\r\n                return ButtonTranslatedType.TEXT;\r\n            case ButtonType.LINK:\r\n                return ButtonTranslatedType.LINK;\r\n            case ButtonType.FILE:\r\n                return ButtonTranslatedType.FILE;\r\n            case ButtonType.MAIL:\r\n                return ButtonTranslatedType.MAIL;\r\n            case ButtonType.CSV:\r\n                return ButtonTranslatedType.CSV;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    private openNotification(message: string): void {\r\n        this.snackBar.openFromComponent(SnackbarComponent, {\r\n            data: { message },\r\n            horizontalPosition: \"left\",\r\n            verticalPosition: \"bottom\",\r\n            duration: 5000,\r\n            panelClass: \"notification\"\r\n        });\r\n    }\r\n}\r\n","<ng-container>\r\n    <div class=\"wrapper\">\r\n        <div class=\"actions\">\r\n            <button mat-button button (click)=\"onOpenMenuCreationPopup()\">\r\n                <mat-icon>add</mat-icon>\r\n                Создать блок кнопок\r\n            </button>\r\n            <button mat-button button (click)=\"copyJSONtoClipboard()\">\r\n                <mat-icon>content_copy</mat-icon>\r\n                Скопировать JSON\r\n            </button>\r\n            <button mat-button button (click)=\"clearStorage()\">\r\n                <mat-icon>delete</mat-icon>\r\n                Очистить хранилище\r\n            </button>\r\n        </div>\r\n\r\n        <div class=\"container f-wrap center\">\r\n            <app-menu *ngFor=\"let menu of menus\"\r\n                      class=\"menu\"\r\n                      [caption]=\"menu.caption\"\r\n                      [buttons]=\"menu.btn_elements\"\r\n                      (addButton)=\"onOpenButtonCreationPopup(menu.id)\"\r\n                      (openButtonEditingPopup)=\"onOpenButtonEditingPopup(menu.id, $event)\"\r\n                      (openMenuEditingPopup)=\"onOpenMenuEditingPopup(menu.id)\"\r\n                      (removeMenu)=\"onRemoveMenu(menu.id)\"\r\n                      (removeButton)=\"onRemoveButton(menu.id, $event)\"\r\n            ></app-menu>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n","import { NgModule } from \"@angular/core\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { AppRoutingModule } from \"./app-routing.module\";\r\nimport { AppComponent } from \"./app.component\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { MenuModule } from \"./modules/menu/menu.module\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { ConfirmationModule } from \"./modules/comfirmation/confirmation.module\";\r\nimport { ButtonModule } from \"./modules/button/button.module\";\r\nimport { MatSnackBarModule } from \"@angular/material/snack-bar\";\r\nimport { SnackbarModule } from \"./modules/snackbar/snackbar.module\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n    ],\r\n    imports: [\r\n        BrowserModule,\r\n        BrowserAnimationsModule,\r\n        AppRoutingModule,\r\n        MenuModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatSnackBarModule,\r\n        ConfirmationModule,\r\n        ButtonModule,\r\n        SnackbarModule\r\n    ],\r\n    providers: [],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n","import { MatDialogConfig } from \"@angular/material/dialog\";\r\n\r\nexport const dialogConfig: MatDialogConfig = {\r\n    minWidth: \"40vw\",\r\n};\r\n","\r\n\r\n\r\nexport class GeneralHelper {\r\n\r\n    public static isObject<T extends object>(value: unknown): value is T;\r\n    public static isObject(value: unknown): value is object {\r\n        return value !== null && typeof value === \"object\";\r\n    }\r\n\r\n}\r\n","import { Entity, Parameters } from \"../../models/types\";\r\nimport { GeneralHelper } from \"./general.helper\";\r\nimport cloneDeep from \"lodash.clonedeep\";\r\n\r\nconst isObject = GeneralHelper.isObject;\r\nconst isArray = Array.isArray;\r\nconst isEntityObject = <T extends Entity>(value: unknown): value is T => isObject<T>(value) && Object.hasOwn(value, \"id\");\r\n\r\nexport class UpdateHelper {\r\n\r\n    public static update<T extends Entity | Entity[]>(source: T, parameters: Parameters<T>): T {\r\n        if (!isObject(source) || !isObject(parameters)) {\r\n            return source;\r\n        }\r\n\r\n        source = cloneDeep(source);\r\n        parameters = cloneDeep(parameters);\r\n\r\n        if (isArray(source) && isArray(parameters)) {\r\n            return this.updateArray(source, parameters) as T;\r\n        }\r\n\r\n        if (isObject(source) && isObject(parameters)) {\r\n            return this.updateObject<T>(source, parameters);\r\n        }\r\n\r\n        return parameters ? parameters as T : source;\r\n    }\r\n\r\n    private static updateObject<T extends object>(source: T, parameters: object): T {\r\n        const result: T = source;\r\n\r\n        Object.entries(parameters).forEach(([key, value]: [string, unknown]) => {\r\n            const sourceValue = source[key];\r\n\r\n            if (isArray(sourceValue) && isArray(value)) {\r\n                result[key] = this.updateArray(sourceValue, value);\r\n            } else if (isObject(sourceValue) && isObject<Entity>(value)) {\r\n                result[key] = this.updateObject(sourceValue, value);\r\n            } else {\r\n                result[key] = value;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    private static updateArray(source: Array<unknown>, parameter: Array<unknown>): Array<unknown>;\r\n    private static updateArray<T extends Entity>(source: Array<T>, parameter: Array<T>): Array<T> {\r\n        if (!isArray(source) && !isArray(parameter)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!isArray(source)) {\r\n            return parameter;\r\n        }\r\n\r\n        if (!isArray(parameter)) {\r\n            return source;\r\n        }\r\n\r\n        if (this.isArrayOfEntities<T>(source) && this.isArrayOfEntities<T>(parameter)) {\r\n            const result: Map<T[\"id\"], T> = this.getMapFormEntitiesArray(source);\r\n            parameter.forEach((entity: T) => {\r\n                if (entity) {\r\n                    const item: T = result.get(entity.id);\r\n                    if (!item) {\r\n                        result.set(entity.id, entity);\r\n                    } else {\r\n                        const updatedItem = this.update(item, entity);\r\n                        result.set(updatedItem.id, updatedItem);\r\n                    }\r\n                }\r\n            });\r\n\r\n            return [...result.values()];\r\n        }\r\n\r\n        return parameter;\r\n    }\r\n\r\n    private static isArrayOfEntities<T extends Entity = Entity>(array: Array<unknown>): array is Array<T> {\r\n        if (!isArray(array)) {\r\n            return false;\r\n        }\r\n\r\n        if (array.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        return isEntityObject(array[0]);\r\n    }\r\n\r\n    private static getMapFormEntitiesArray<T extends Entity = Entity>(array: T[]): Map<T[\"id\"], T> {\r\n        return array.reduce((map: Map<T[\"id\"], T>, item: T) => map.set(item.id, item), new Map<T[\"id\"], T>());\r\n    }\r\n\r\n}\r\n","import { Entity } from \"./types\";\r\n\r\nexport enum ButtonType {\r\n    MENU = \"меню\",\r\n    LINK = \"ссылка\",\r\n    FILE = \"файл\",\r\n    MAIL = \"почта\",\r\n    TEXT = \"текст\",\r\n    CSV = \"csv\"\r\n}\r\n\r\nexport enum ButtonTranslatedType {\r\n    MENU = \"menu\",\r\n    LINK = \"link\",\r\n    FILE = \"file\",\r\n    MAIL = \"mail\",\r\n    TEXT = \"text\",\r\n    CSV = \"csv\"\r\n}\r\n\r\nexport interface Button extends Entity {\r\n    type?: ButtonType | ButtonTranslatedType | string;\r\n    src?: string;\r\n    caption?: string;\r\n}\r\n\r\n","import { Menu } from \"./menu.model\";\r\nimport { Button } from \"./btn.model\";\r\n\r\nexport enum PopupMode {\r\n    CREATION = \"creation\",\r\n    EDIT = \"edit\",\r\n    REMOVE = \"remove\"\r\n}\r\n\r\nexport interface DialogData {\r\n    mode: PopupMode;\r\n    menus: Menu[];\r\n}\r\n\r\nexport interface MenuCreationDialogData extends DialogData {\r\n    menu?: Menu;\r\n}\r\n\r\nexport interface ButtonCreationDialogData extends DialogData {\r\n    button?: Button;\r\n    currentMenu?: Menu;\r\n}\r\n\r\ninterface ConfirmationDialogData extends ButtonCreationDialogData, MenuCreationDialogData {}\r\n\r\nexport interface RemoveConfirmationDialogData extends Omit<ConfirmationDialogData, \"menus\"> {\r\n    mode: PopupMode.REMOVE\r\n}\r\n\r\nexport interface EditConfirmationDialogData extends ConfirmationDialogData {\r\n    mode: PopupMode.EDIT\r\n}\r\n","import { Directive, HostBinding, Input } from \"@angular/core\";\r\n\r\n@Directive({\r\n    // eslint-disable-next-line @angular-eslint/directive-selector\r\n    selector: \"[button]\",\r\n})\r\nexport class ButtonDirective {\r\n    @Input() flat: boolean;\r\n\r\n    @HostBinding(\"style.background-color\")\r\n    public get bgColor(): string {\r\n        if (!this.flat) {\r\n            return \"#F0F1F3\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @HostBinding(\"style.border-radius\")\r\n    public borderRadius: string = \"6px\";\r\n\r\n    @HostBinding(\"style.font-weight\")\r\n    public fontWeight: string = \"400\";\r\n\r\n    @HostBinding(\"style.letter-spacing\")\r\n    public letterSpacing: string = \"normal\";\r\n\r\n    @HostBinding(\"style.padding\")\r\n    public padding: string = \"10px\";\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { CreateButtonPopupComponent } from \"./components/create-button-popup/create-button-popup.component\";\r\nimport { ButtonComponent } from \"./components/button/button.component\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\r\nimport { MatChipsModule } from \"@angular/material/chips\";\r\nimport { MatListModule } from \"@angular/material/list\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatExpansionModule } from \"@angular/material/expansion\";\r\nimport { CdkDrag } from \"@angular/cdk/drag-drop\";\r\nimport { MatAutocompleteModule } from \"@angular/material/autocomplete\";\r\nimport { ButtonDirective } from \"./button.directive\";\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        CreateButtonPopupComponent,\r\n        ButtonComponent,\r\n        ButtonDirective\r\n    ],\r\n    exports: [\r\n        ButtonComponent,\r\n        ButtonDirective,\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        MatDialogModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatButtonModule,\r\n        MatCheckboxModule,\r\n        MatChipsModule,\r\n        MatListModule,\r\n        MatIconModule,\r\n        MatExpansionModule,\r\n        CdkDrag,\r\n        MatAutocompleteModule,\r\n        MatTooltipModule\r\n    ]\r\n})\r\nexport class ButtonModule {\r\n}\r\n","import { Component, EventEmitter, Input, Output } from \"@angular/core\";\r\nimport { ButtonType } from \"../../../../models/btn.model\";\r\n\r\n@Component({\r\n    selector: \"app-button\",\r\n    templateUrl: \"./button.component.html\",\r\n    styleUrls: [\"./button.component.scss\"]\r\n})\r\nexport class ButtonComponent {\r\n\r\n    @Input() type: ButtonType | string;\r\n    @Input() caption: string;\r\n    @Input() buttonSrc: string;\r\n\r\n    @Input() first: boolean;\r\n    @Input() last: boolean;\r\n\r\n    @Output() buttonEdit: EventEmitter<void> = new EventEmitter<void>();\r\n    @Output() buttonRemove: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    public onDeleteClick(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n        this.buttonRemove.emit();\r\n    }\r\n\r\n    public onEditClick(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n        this.buttonEdit.emit();\r\n    }\r\n}\r\n","<mat-expansion-panel\r\n    cdkDrag\r\n    hideToggle\r\n    class=\"button-panel\"\r\n    [class._first]=\"first\"\r\n    [class._last]=\"last\"\r\n>\r\n    <mat-expansion-panel-header>\r\n        <mat-panel-title [title]=\"caption\">{{ caption.length > 20 ? caption.slice(0, 20) + '...' : caption }}</mat-panel-title>\r\n        <mat-panel-description>{{ type }}</mat-panel-description>\r\n        <button class=\"button-panel__action\" mat-icon-button aria-label=\"Edit icon\" (click)=\"onEditClick($event)\">\r\n            <mat-icon>edit</mat-icon>\r\n        </button>\r\n        <button class=\"button-panel__action\" mat-icon-button aria-label=\"Delete icon\" (click)=\"onDeleteClick($event)\">\r\n            <mat-icon>delete</mat-icon>\r\n        </button>\r\n    </mat-expansion-panel-header>\r\n    <ng-template matExpansionPanelContent>\r\n        Источник: {{ buttonSrc }}\r\n    </ng-template>\r\n</mat-expansion-panel>\r\n","import { Component, HostListener, Inject, OnDestroy, OnInit, SimpleChange } from \"@angular/core\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { ButtonCreationDialogData } from \"../../../../models/dialog.model\";\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from \"@angular/forms\";\r\nimport { Button, ButtonType } from \"../../../../models/btn.model\";\r\nimport { v4 } from \"uuid\";\r\nimport { distinctUntilChanged, Subject, takeUntil } from \"rxjs\";\r\nimport { Update } from \"../../../../models/types\";\r\nimport { Menu } from \"../../../../models/menu.model\";\r\n\r\n\r\n@Component({\r\n    selector: \"app-create-button-popup\",\r\n    templateUrl: \"./create-button-popup.component.html\",\r\n    styleUrls: [\"./create-button-popup.component.scss\"]\r\n})\r\nexport class CreateButtonPopupComponent implements OnInit, OnDestroy {\r\n\r\n    public readonly buttonTypesEnum: typeof ButtonType = ButtonType;\r\n    public readonly buttonTypeHints: Record<ButtonType, string> = {\r\n        [ButtonType.MENU]: \"Переход к другому блоку кнопок\",\r\n        [ButtonType.LINK]: \"Ссылка на ресурс\",\r\n        [ButtonType.FILE]: \"Загрузка файла\",\r\n        [ButtonType.MAIL]: \"Почта\",\r\n        [ButtonType.TEXT]: undefined,\r\n        [ButtonType.CSV]: \"Добавить CSV файл\",\r\n    };\r\n    public readonly labeles: Record<ButtonType, string> = {\r\n        [ButtonType.MENU]: \"Название блока\",\r\n        [ButtonType.LINK]: \"Адрес ссылки\",\r\n        [ButtonType.FILE]: \"Путь к файлу\",\r\n        [ButtonType.MAIL]: \"Адрес получения\",\r\n        [ButtonType.TEXT]: \"Текст\",\r\n        [ButtonType.CSV]: \"Путь к файлу\",\r\n    }\r\n    public buttonTypes: ButtonType[] = Object.values(ButtonType);\r\n\r\n    public formGroup: FormGroup;\r\n    public button: Update<Button>;\r\n    public editMode: boolean = false;\r\n    public filteredMenus: Menu[];\r\n\r\n    public get typeControl(): AbstractControl {\r\n        return this.formGroup.get(\"type\");\r\n    }\r\n\r\n    public get captionControl(): AbstractControl {\r\n        return this.formGroup.get(\"caption\");\r\n    }\r\n\r\n    public get srcControl(): AbstractControl {\r\n        return this.formGroup.get(\"src\");\r\n    }\r\n\r\n    private destroy$: Subject<void> = new Subject<void>();\r\n    private menus: Menu[];\r\n    private chosenMenu: Menu;\r\n    private buttonId: string;\r\n\r\n    @HostListener(\"window:keyup.Enter\")\r\n    public onDialogClick(): void {\r\n        if (this.formGroup.valid) {\r\n            this.dialogRef.close(this.button);\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<CreateButtonPopupComponent>,\r\n        @Inject(MAT_DIALOG_DATA) private data: ButtonCreationDialogData,\r\n    ) {}\r\n\r\n    public ngOnInit(): void {\r\n        const button: Button = this.data.button ?? { id: v4() };\r\n        this.menus = this.data.menus?.filter((menu: Menu) => menu !== this.data.currentMenu) ?? [];\r\n        this.editMode = Boolean(this.data.button);\r\n        this.buttonId = button.id;\r\n        if (this.isMenu(button.type)) {\r\n            this.chosenMenu = this.menus.find((menu: Menu) => menu.id === button.src);\r\n        }\r\n        const btnSource: string = this.isMenu(button.type) ? this.chosenMenu?.caption ?? \"\" : button.src;\r\n        this.formGroup = new FormGroup({\r\n            caption: new FormControl(button.caption, Validators.required),\r\n            src: new FormControl(btnSource, Validators.required),\r\n            type: new FormControl(button.type ?? ButtonType.MENU),\r\n        });\r\n        this.filterMenusForAutocomplete();\r\n\r\n        this.formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n            \r\n            if (this.formGroup.value.type !== ButtonType.MENU) {\r\n                this.chosenMenu = null;\r\n            }\r\n\r\n            this.updateButtonData();\r\n            this.filterMenusForAutocomplete();\r\n        });\r\n\r\n        this.typeControl.valueChanges.pipe(\r\n            takeUntil(this.destroy$),\r\n            distinctUntilChanged(),\r\n        ).subscribe(() => {\r\n            this.srcControl.setValue(\"\");\r\n            this.srcControl.markAsUntouched();\r\n            this.srcControl.markAsPristine();\r\n        });\r\n    }\r\n\r\n    public ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    public setChosenMenu(menu: Menu): void {\r\n        this.chosenMenu = menu;\r\n        this.updateButtonData();\r\n    }\r\n\r\n    public onCancelClick(): void {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    private filterMenusForAutocomplete(): void {\r\n        const type: ButtonType = this.formGroup.get(\"type\").value;\r\n        if (type === ButtonType.MENU) {\r\n            const value: string = this.formGroup.get(\"src\").value ?? \"\";\r\n            this.filteredMenus = this.menus.filter((menu: Menu) => this.checkIncludes(menu.caption, value) || this.checkIncludes(menu.id, value));\r\n        } else {\r\n            this.filteredMenus = [];\r\n        }\r\n    }\r\n\r\n    private updateButtonData(): void {\r\n        if (this.formGroup.valid) {\r\n            this.button = {\r\n                id: this.buttonId,\r\n                parameters: {\r\n                    ...this.formGroup.value,\r\n                    src: this.getSource(),\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    private getSource(): string {\r\n        return this.chosenMenu ? this.chosenMenu.id : this.formGroup.value.src;\r\n    }\r\n\r\n    private isMenu(value: string): boolean {\r\n        return ButtonType.MENU === value;\r\n    }\r\n\r\n    private checkIncludes(sourceString: string, value: string): boolean {\r\n        return new RegExp(value, \"i\").test(sourceString);\r\n    }\r\n\r\n}\r\n","<h1 mat-dialog-title>{{ editMode ? 'Редактирование кнопки' : 'Создание кнопки' }}</h1>\r\n<div mat-dialog-content>\r\n    <form class=\"create-button-form\" [formGroup]=\"formGroup\">\r\n        <mat-chip-listbox class=\"create-button-form__button-types\" formControlName=\"type\" aria-label=\"Fish selection\">\r\n            <mat-chip-option\r\n                *ngFor=\"let buttonType of buttonTypes; let i = index\"\r\n                [matTooltip]=\"buttonTypeHints[buttonType]\"\r\n            >{{ buttonType }}</mat-chip-option>\r\n        </mat-chip-listbox>\r\n        <mat-form-field class=\"create-button-form__control\" appearance=\"outline\">\r\n            <mat-label>Название кнопки</mat-label>\r\n            <input matInput formControlName=\"caption\">\r\n            <mat-error *ngIf=\"captionControl?.invalid\">Это поле обязательно для заполнения</mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field *ngIf=\"typeControl.value\" class=\"create-button-form__control\" appearance=\"outline\">\r\n            <mat-label>{{ labeles[typeControl.value] }}</mat-label>\r\n            <input matInput formControlName=\"src\" [matAutocomplete]=\"auto\">\r\n            <mat-error *ngIf=\"srcControl?.invalid\">Это поле обязательно для заполнения</mat-error>\r\n            <mat-autocomplete #auto=\"matAutocomplete\">\r\n                <mat-option *ngFor=\"let menu of filteredMenus\" (click)=\"setChosenMenu(menu)\" [value]=\"menu.caption\">\r\n                    <span>{{ menu.caption }}</span>\r\n                </mat-option>\r\n            </mat-autocomplete>\r\n        </mat-form-field>\r\n        <!-- <mat-form-field *ngIf=\"typeControl.value\" class=\"create-button-form__control\" appearance=\"outline\">\r\n            <mat-label>{{ labeles[typeControl.value] }}</mat-label>\r\n            <input matInput formControlName=\"src\" [matAutocomplete]=\"auto\">\r\n            <mat-error *ngIf=\"srcControl?.invalid\">Это поле обязательно для заполнения</mat-error>\r\n        </mat-form-field> -->\r\n    </form>\r\n</div>\r\n<div mat-dialog-actions align=\"end\">\r\n    <button mat-button button (click)=\"onCancelClick()\">Отмена</button>\r\n    <button\r\n        mat-flat-button\r\n        button\r\n        color=\"primary\"\r\n        cdkFocusInitial\r\n        [flat]=\"true\"\r\n        [mat-dialog-close]=\"button\"\r\n        [disabled]=\"formGroup.invalid\"\r\n    >{{ editMode ? 'Сохранить' : 'Создать' }}</button>\r\n</div>\r\n","import { Component, Inject, ViewEncapsulation } from \"@angular/core\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { Menu } from \"src/app/models/menu.model\";\r\nimport { RemoveConfirmationDialogData } from \"../../../../models/dialog.model\";\r\nimport { Button } from \"../../../../models/btn.model\";\r\n\r\nexport type RemovingItem = Menu | Button;\r\nexport type EntityName = \"menu\" | \"button\";\r\n\r\nconst NAME: unique symbol = Symbol(\"NAME\");\r\n\r\n@Component({\r\n    selector: \"app-remove-confirmation-popup\",\r\n    templateUrl: \"./remove-confirmation-popup.component.html\",\r\n    styleUrls: [\"./remove-confirmation-popup.component.scss\"],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class RemoveConfirmationPopupComponent {\r\n\r\n    public removingItem: RemovingItem & { [NAME]: string };\r\n\r\n    public get entityName(): string {\r\n        return this.removingItem[NAME];\r\n    }\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<RemoveConfirmationPopupComponent>,\r\n        @Inject(MAT_DIALOG_DATA) private data: RemoveConfirmationDialogData,\r\n    ) {\r\n        if (this.data.button) {\r\n            this.removingItem = {\r\n                ...this.data.button,\r\n                [NAME]: \"Кнопку\"\r\n            };\r\n        }\r\n        if (this.data.menu) {\r\n            this.removingItem = {\r\n                ...this.data.menu,\r\n                [NAME]: \"Меню\"\r\n            };\r\n        }\r\n    }\r\n\r\n    public onCancelClick(): void {\r\n        this.dialogRef.close(false);\r\n    }\r\n\r\n    public onRemoveClick(): void {\r\n        this.dialogRef.close(true);\r\n    }\r\n\r\n}\r\n","<h1 mat-dialog-title>Вы точно хотите безвозвратно удалить {{ entityName }}: {{ removingItem.caption }}?</h1>\r\n<div mat-dialog-content>\r\n    <p>id: {{ removingItem.id }}</p>\r\n</div>\r\n<div mat-dialog-actions align=\"end\">\r\n    <button mat-button button (click)=\"onCancelClick()\">Отмена</button>\r\n    <button mat-flat-button button [flat]=\"true\" color=\"warn\" (click)=\"onRemoveClick()\" cdkFocusInitial>\r\n        <mat-icon>delete</mat-icon>\r\n        Удалить\r\n    </button>\r\n</div>\r\n\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport {\r\n    RemoveConfirmationPopupComponent\r\n} from \"./components/remove-confirmation-popup/remove-confirmation-popup.component\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { ButtonModule } from \"../button/button.module\";\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        RemoveConfirmationPopupComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        MatDialogModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        ButtonModule\r\n    ]\r\n})\r\nexport class ConfirmationModule {\r\n}\r\n","import { Component, HostListener, Inject, OnDestroy } from \"@angular/core\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MenuCreationDialogData } from \"../../../../models/dialog.model\";\r\nimport { Menu } from \"../../../../models/menu.model\";\r\nimport { v4 } from \"uuid\";\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from \"@angular/forms\";\r\nimport { Subject, takeUntil } from \"rxjs\";\r\nimport { Update } from \"../../../../models/types\";\r\n\r\n@Component({\r\n    selector: \"app-create-menu-popup\",\r\n    templateUrl: \"./create-menu-popup.component.html\",\r\n    styleUrls: [\"./create-menu-popup.component.scss\"]\r\n})\r\nexport class CreateMenuPopupComponent implements OnDestroy {\r\n\r\n    public editMode: boolean = false;\r\n    public formGroup: FormGroup;\r\n    public menu: Update<Menu>;\r\n\r\n    public get captionControl(): AbstractControl {\r\n        return this.formGroup.get(\"caption\");\r\n    }\r\n\r\n    private destroy$: Subject<void> = new Subject<void>();\r\n\r\n    @HostListener(\"window:keyup.Enter\")\r\n    public onDialogClick(): void {\r\n        if (this.formGroup.valid) {\r\n            this.dialogRef.close(this.menu);\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<CreateMenuPopupComponent>,\r\n        @Inject(MAT_DIALOG_DATA) private data: MenuCreationDialogData,\r\n    ) {\r\n        const menu: Menu = this.data.menu ?? { id: v4() };\r\n        this.editMode = Boolean(this.data.menu);\r\n        this.formGroup = new FormGroup({\r\n            caption: new FormControl(menu.caption, Validators.required),\r\n        });\r\n\r\n        this.formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n            if (this.formGroup.valid) {\r\n                this.menu = {\r\n                    id: menu.id,\r\n                    parameters: {\r\n                        ...this.formGroup.value,\r\n                        ...this.editMode ? { btn_elements: menu.btn_elements } : { btn_elements: [] }\r\n                    }\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    public ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    public onCancelClick(): void {\r\n        this.dialogRef.close();\r\n    }\r\n}\r\n","<h1 mat-dialog-title>{{ editMode ? 'Редактирование блока кнопок' : 'Создание блока кнопок' }}</h1>\r\n<div mat-dialog-content>\r\n    <form class=\"create-menu-form\" [formGroup]=\"formGroup\">\r\n        <mat-form-field appearance=\"outline\">\r\n            <mat-label>Текст над блоком кнопок</mat-label>\r\n            <input matInput formControlName=\"caption\">\r\n            <mat-error *ngIf=\"captionControl?.invalid\">Это поле обязательно для заполнения</mat-error>\r\n        </mat-form-field>\r\n    </form>\r\n</div>\r\n<div mat-dialog-actions align=\"end\">\r\n    <button mat-button button (click)=\"onCancelClick()\">Отменить</button>\r\n    <button\r\n        button\r\n        mat-flat-button\r\n        color=\"primary\"\r\n        cdkFocusInitial\r\n        [flat]=\"true\"\r\n        [mat-dialog-close]=\"menu\"\r\n        [disabled]=\"formGroup.invalid\"\r\n    >{{ editMode ? 'Сохранить' : 'Создать' }}</button>\r\n</div>\r\n","import { Component, EventEmitter, Input, Output, ViewEncapsulation } from \"@angular/core\";\r\nimport { Button } from \"../../../../models/btn.model\";\r\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from \"@angular/cdk/drag-drop\";\r\n\r\n@Component({\r\n    selector: \"app-menu\",\r\n    templateUrl: \"./menu.component.html\",\r\n    styleUrls: [\"./menu.component.scss\"],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class MenuComponent {\r\n    @Input() caption: string;\r\n    @Input() buttons: Button[];\r\n\r\n    @Output() openMenuEditingPopup: EventEmitter<void> = new EventEmitter<void>();\r\n    @Output() removeMenu: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    @Output() openButtonEditingPopup: EventEmitter<string> = new EventEmitter<string>();\r\n    @Output() removeButton: EventEmitter<string> = new EventEmitter<string>();\r\n    @Output() addButton: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    public drop(event: CdkDragDrop<Button[]>): void {\r\n        if (event.previousContainer === event.container) {\r\n            moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n        } else {\r\n            transferArrayItem(\r\n                event.previousContainer.data,\r\n                event.container.data,\r\n                event.previousIndex,\r\n                event.currentIndex,\r\n            );\r\n        }\r\n    }\r\n\r\n    public onAddButton(): void {\r\n        this.addButton.emit();\r\n    }\r\n\r\n    public onRemoveClick(): void {\r\n        this.removeMenu.emit();\r\n    }\r\n\r\n    public onMenuEditClick(): void {\r\n        this.openMenuEditingPopup.emit();\r\n    }\r\n\r\n    public onButtonEditClick(buttonId: string): void {\r\n        this.openButtonEditingPopup.emit(buttonId);\r\n    }\r\n\r\n    public onButtonRemoveClick(buttonId: string): void {\r\n        this.removeButton.emit(buttonId);\r\n    }\r\n\r\n}\r\n","<ng-container>\r\n    <mat-card class=\"menu-card\">\r\n        <mat-card-header class=\"menu-card__header\">\r\n            <mat-card-title>{{ caption }}</mat-card-title>\r\n        </mat-card-header>\r\n        <mat-card-content class=\"menu-card__content\">\r\n            <mat-accordion multi cdkDropList class=\"menu-card__buttons-accordion\"\r\n                           [cdkDropListData]=\"buttons\"\r\n                           (cdkDropListDropped)=\"drop($event)\">\r\n                <app-button *ngFor=\"let button of buttons; let first = first; let last = last\"\r\n                            [type]=\"button.type\"\r\n                            [caption]=\"button.caption\"\r\n                            [buttonSrc]=\"button.src\"\r\n                            [first]=\"first\"\r\n                            [last]=\"last\"\r\n                            (buttonEdit)=\"onButtonEditClick(button.id)\"\r\n                            (buttonRemove)=\"onButtonRemoveClick(button.id)\"\r\n                ></app-button>\r\n            </mat-accordion>\r\n            <button mat-button button (click)=\"onAddButton()\">\r\n                <mat-icon class=\"mat-18\">add</mat-icon>\r\n                Добавить кнопку\r\n            </button>\r\n        </mat-card-content>\r\n        <mat-card-actions class=\"menu-card__actions\" align=\"end\">\r\n            <button mat-flat-button button color=\"primary\"\r\n                    [flat]=\"true\"\r\n                    (click)=\"onMenuEditClick()\"\r\n            >\r\n                <mat-icon>mode_edit</mat-icon>\r\n                Редактировать\r\n            </button>\r\n            <button mat-flat-button button color=\"warn\"\r\n                    [flat]=\"true\"\r\n                    (click)=\"onRemoveClick()\">\r\n                <mat-icon>delete</mat-icon>\r\n                Удалить\r\n            </button>\r\n        </mat-card-actions>\r\n    </mat-card>\r\n</ng-container>\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { MenuComponent } from \"./components/menu/menu.component\";\r\nimport { CreateMenuPopupComponent } from \"./components/create-menu-popup/create-menu-popup.component\";\r\nimport { MatCardModule } from \"@angular/material/card\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatListModule } from \"@angular/material/list\";\r\nimport { ButtonModule } from \"../button/button.module\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\r\nimport {MatExpansionModule} from \"@angular/material/expansion\";\r\nimport {CdkDropList} from \"@angular/cdk/drag-drop\";\r\nimport {MatDialogModule} from \"@angular/material/dialog\";\r\nimport {MatInputModule} from \"@angular/material/input\";\r\nimport {MatCheckboxModule} from \"@angular/material/checkbox\";\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        MenuComponent,\r\n        CreateMenuPopupComponent\r\n    ],\r\n    exports: [\r\n        MenuComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        MatIconModule,\r\n        MatCardModule,\r\n        MatButtonModule,\r\n        MatListModule,\r\n        ButtonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatExpansionModule,\r\n        CdkDropList,\r\n        MatDialogModule,\r\n        MatInputModule,\r\n        MatCheckboxModule,\r\n    ]\r\n})\r\nexport class MenuModule {\r\n}\r\n","import { Component, Inject, inject } from \"@angular/core\";\r\nimport { MAT_SNACK_BAR_DATA, MatSnackBarRef } from \"@angular/material/snack-bar\";\r\n\r\n@Component({\r\n    selector: \"app-snackbar\",\r\n    templateUrl: \"./snackbar.component.html\",\r\n    styleUrls: [\"./snackbar.component.scss\"]\r\n})\r\nexport class SnackbarComponent {\r\n    snackBarRef = inject(MatSnackBarRef);\r\n\r\n    constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any) {}\r\n}\r\n","<span class=\"snackbar-title\" matSnackBarLabel>\r\n    {{ data.message }}\r\n</span>\r\n<span matSnackBarActions>\r\n    <button mat-button matSnackBarAction (click)=\"snackBarRef.dismissWithAction()\">\r\n        <mat-icon class=\"mat-18\">close</mat-icon>\r\n    </button>\r\n</span>\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { SnackbarComponent } from \"./components/snackbar/snackbar.component\";\r\nimport { MatSnackBarModule } from \"@angular/material/snack-bar\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { ButtonModule } from \"../button/button.module\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\n\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        SnackbarComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        MatSnackBarModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        ButtonModule\r\n    ]\r\n})\r\nexport class SnackbarModule { }\r\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\n\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"names":["RouterModule","routes","AppRoutingModule","forRoot","imports","exports","ButtonTranslatedType","ButtonType","CreateButtonPopupComponent","PopupMode","UpdateHelper","CreateMenuPopupComponent","RemoveConfirmationPopupComponent","SnackbarComponent","cloneDeep","dialogConfig","i0","MENUS","AppComponent","constructor","dialog","snackBar","Map","ngOnInit","loadMenusFromStorage","console","log","menus","menusMap","values","copyJSONtoClipboard","getMenus","flatMap","menu","btn_elements","forEach","button","type","translateButtonType","id","globalThis","navigator","clipboard","writeText","JSON","stringify","undefined","openNotification","error","onOpenMenuCreationPopup","openMenuCreationPopup","onOpenMenuEditingPopup","menuId","onOpenButtonCreationPopup","openButtonCreationPopup","onOpenButtonEditingPopup","buttonId","clearStorage","window","localStorage","clear","onRemoveButton","getButton","openRemoveConfirmationPopup","removeButton","caption","onRemoveMenu","getMenu","removeMenu","removingItem","entityName","whenRemoveClicked","dialogRef","open","data","mode","REMOVE","afterClosed","subscribe","isRemoved","editMode","Boolean","EDIT","CREATION","newMenu","set","update","parameters","save","buttons","buttonIndex","findIndex","currentMenu","newButton","push","find","get","index","btn","splice","delete","clearAllMenuReferences","entriesString","getItem","entries","parse","src","menusEntries","setItem","value","MENU","TEXT","LINK","FILE","MAIL","CSV","message","openFromComponent","horizontalPosition","verticalPosition","duration","panelClass","selectors","decls","vars","consts","template","ctx","BrowserModule","BrowserAnimationsModule","MenuModule","MatButtonModule","MatIconModule","ConfirmationModule","ButtonModule","MatSnackBarModule","SnackbarModule","AppModule","bootstrap","declarations","minWidth","GeneralHelper","isObject","isArray","Array","isEntityObject","Object","hasOwn","source","updateArray","updateObject","result","key","sourceValue","parameter","isArrayOfEntities","getMapFormEntitiesArray","entity","item","updatedItem","array","length","reduce","map","ButtonDirective","bgColor","flat","hostVars","hostBindings","CommonModule","ButtonComponent","MatDialogModule","MatFormFieldModule","MatInputModule","FormsModule","ReactiveFormsModule","MatCheckboxModule","MatChipsModule","MatListModule","MatExpansionModule","CdkDrag","MatAutocompleteModule","MatTooltipModule","EventEmitter","onDeleteClick","event","stopPropagation","buttonRemove","emit","onEditClick","buttonEdit","inputs","buttonSrc","first","last","outputs","MAT_DIALOG_DATA","FormControl","FormGroup","Validators","v4","distinctUntilChanged","Subject","takeUntil","typeControl","formGroup","captionControl","srcControl","onDialogClick","valid","close","filter","isMenu","chosenMenu","btnSource","required","filterMenusForAutocomplete","valueChanges","pipe","destroy$","updateButtonData","setValue","markAsUntouched","markAsPristine","ngOnDestroy","next","complete","setChosenMenu","onCancelClick","filteredMenus","checkIncludes","getSource","sourceString","RegExp","test","NAME","Symbol","onRemoveClick","moveItemInArray","transferArrayItem","MenuComponent","drop","previousContainer","container","previousIndex","currentIndex","onAddButton","addButton","onMenuEditClick","openMenuEditingPopup","onButtonEditClick","openButtonEditingPopup","onButtonRemoveClick","MatCardModule","CdkDropList","inject","MAT_SNACK_BAR_DATA","MatSnackBarRef","__NgCli_bootstrap_1","bootstrapModule","catch","err"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}